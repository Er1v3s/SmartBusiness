
networks:
  app-network:
    driver: bridge
  monitoring-network:
    driver: bridge

volumes:
  mssql-data:
  mongodb-data:
  prometheus-data:
  grafana-data:
  redis-data:
  ml.data:

    # MONITORING SERVICE TURN OFF WHILE DEVELOPMENT

services:

  # API GATEWAY
  gateway.smart-business:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=2000
      - ASPNETCORE_HTTPS_PORTS=2001
      - ASPNETCORE_Kestrel__Certificates__Default__Password=SuperPassword123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/cert.pfx
      # - Otel__Endpoint=http://otel-collector:4317 
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
    container_name: gateway.smart-business
    image: gateway.smart-business
    build:
      context: .
      dockerfile: ApiGateway/SmartBusiness.ApiGateway/Dockerfile
    ports:
      - "2000:2000"
      - "2001:2001"
    volumes:
      - ./https:/https:ro
    # depends_on:
      # otel-collector:
        # condition: service_started
    networks:
      - app-network
      - monitoring-network

  # ACCOUNT SERVICES
  account.smart-business:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=2100
      - ASPNETCORE_HTTPS_PORTS=2101
      - ASPNETCORE_Kestrel__Certificates__Default__Password=SuperPassword123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/cert.pfx
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
    container_name: account.smart-business
    image: account.smart-business
    build:
      context: .
      dockerfile: Services/AccountService/AccountService.Api/Dockerfile
    ports:
      - "2100:2100"
      - "2101:2101"
    volumes:
      - ./https:/https:ro
    depends_on:
      database.server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
      - monitoring-network
  
  # SALES SERVICES
  sales.smart-business:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=2200
      - ASPNETCORE_HTTPS_PORTS=2201
      - ASPNETCORE_Kestrel__Certificates__Default__Password=SuperPassword123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/cert.pfx
      # - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
    container_name: sales.smart-business
    image: sales.smart-business
    build:
      context: .
      dockerfile: Services/SalesService/SalesService.Api/Dockerfile
    ports:
      - "2200:2200"
      - "2201:2201"
    volumes:
      - ./https:/https:ro
    depends_on:
      database.server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
      - monitoring-network

  # WRITE SERVICE
  write.smart-business:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=2300
      - ASPNETCORE_HTTPS_PORTS=2301
      - ASPNETCORE_Kestrel__Certificates__Default__Password=SuperPassword123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/cert.pfx
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
    container_name: write.smart-business
    image: write.smart-business
    build:
      context: .
      dockerfile: Services/WriteService/WriteService.Api/Dockerfile
    ports:
      - "2300:2300"
      - "2301:2301"
    volumes:
      - ./https:/https:ro
    depends_on:
      mongodb.server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
      - monitoring-network

  # READ SERVICE 
  read.smart-business:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=2400
      - ASPNETCORE_HTTPS_PORTS=2401
      - ASPNETCORE_Kestrel__Certificates__Default__Password=SuperPassword123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/cert.pfx
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
    container_name: read.smart-business
    image: read.smart-business
    build:
      context: .
      dockerfile: Services/ReadService/ReadService.Api/Dockerfile
    ports:
      - "2400:2400"
      - "2401:2401"
    volumes:
      - ./https:/https:ro
    depends_on:
      mongodb.server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
      - monitoring-network

  # FRONTEND APP
  # frontend.smart-business:
  #   container_name: frontend.smart-business
  #   image: frontend.smart-business
  #   build:
  #     context: WebApp/smartbusiness.web
  #     dockerfile: Dockerfile
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./WebApp/smartbusiness.web:/app
  #     - /app/node_modules
  #   depends_on:
  #     - gateway.smart-business
  #     - account.smart-business
  #   networks:
  #     - app-network
  
  # SQL SERVER (FOR ACCOUNT SERVICE)
  database.server:
    image: "mcr.microsoft.com/mssql/server"
    platform: linux/amd64
    container_name: database.server
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=y
      - SA_PASSWORD=SuperPassword123
    volumes:
      - ./sqlserver/data:/var/opt/mssql/data
      - ./sqlserver/log:/var/opt/mssql/log
    healthcheck:
      test: /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "SuperPassword123" -Q "SELECT 1" || exit 1
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 30s
    networks:
      - app-network

  # MONGODB SERVER (FOR WRITE SERVICES and READ SERVICE SEPARATE DB INSTANCES)
  mongodb.server:
    image: mongo:latest
    container_name: mongodb.server
    ports:
      - "27017:27017"
    volumes:
      - ./mongoDb/data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=SA
      - MONGO_INITDB_ROOT_PASSWORD=SuperPassword123
      - MONGO_INITDB_DATABASE=SmartBusinessWriteDb
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 3s
      retries: 10
    networks:
      - app-network

  # RABBITMQ (FOR EVENT BUS)
  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: "rabbitmq"
    hostname: "smartbusiness-queue"
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbitmq_prometheus true"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
      - monitoring-network

  # REDIS (FOR CACHING)
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
 
  # ML PREDICTOR SERVICE
  ml.smart-business:
    image: ml.smart-business
    container_name: ml.smart-business
    build:
      context: .
      dockerfile: ML.Service/Dockerfile
    env_file:
      - ML.Service/.env
    ports:
      - "2500:2500"
    restart: unless-stopped
    depends_on:
      - mongodb.server
    networks:
      - app-network 

  #     WRITE SERVICE
  # write.smart-business:
  #   build:
  #     context: .
  #     dockerfile: Services/WriteService/WriteService.Api/Dockerfile
  #   ports:
  #     - "2300:2300"
  #     - "2301:2301"
  #   volumes:
  #     - ./https:/https:ro
  #   depends_on:
  #     mongodb.server:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy
  #   networks:
  #     - app-network
  #     - monitoring-network

  # MONITORING SERVICES 

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'
  #   volumes:
  #     - ./ApiGateway/SmartBusiness.ApiGateway/config/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus-data:/prometheus
  #   restart: unless-stopped
  #   networks:
  #     - monitoring-network

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   ports:
  #     - '3000:3000'
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #     - ./observability/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
  #     - ./observability/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
  #     - ./observability/grafana/dashboards:/var/lib/grafana/dashboards
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=SuperPassword123
  #   restart: unless-stopped
  #   networks:
  #     - monitoring-network

  # node_exporter:
  #   image: quay.io/prometheus/node-exporter:v1.5.0
  #   container_name: node_exporter
  #   command: '--path.rootfs=/host'
  #   pid: host
  #   restart: unless-stopped
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   networks:
  #     - monitoring-network

  # jaeger:
  #   image: jaegertracing/all-in-one:latest
  #   container_name: jaeger
  #   environment:
  #     - COLLECTOR_OTLP_ENABLED=true
  #   ports:
  #     - "16686:16686"   Jaeger UI
  #     - "14250:14250"   gRPC
  #     - "4317:4317"     OTLP gRPC receiver
  #     - "4318:4318"     OTLP HTTP receiver
  #   networks:
  #     - monitoring-network