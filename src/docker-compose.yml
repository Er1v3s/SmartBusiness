
networks:
  smart-business-network:
    driver: bridge

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  mongo-data:
    driver: local

    # MONITORING SERVICE TURN OFF WHILE DEVELOPMENT

services:

  # API GATEWAY
  gateway.smart-business:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=2000
      - ASPNETCORE_HTTPS_PORTS=2001
      - ASPNETCORE_Kestrel__Certificates__Default__Password=SuperPassword123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/cert.pfx
      # - Otel__Endpoint=http://otel-collector:4317 
    container_name: gateway.smart-business
    image: gateway.smart-business
    build:
      context: .
      dockerfile: ApiGateway/SmartBusiness.ApiGateway/Dockerfile
    ports:
      - "2000:2000"
      - "2001:2001"
    volumes:
      - ./https:/https:ro
    # depends_on:
      # otel-collector:
        # condition: service_started
    networks:
      - smart-business-network

  # ACCOUNT SERVICES
  account.smart-business:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=2100
      - ASPNETCORE_HTTPS_PORTS=2101
      - ASPNETCORE_Kestrel__Certificates__Default__Password=SuperPassword123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/cert.pfx
    container_name: account.smart-business
    image: account.smart-business
    build:
      context: .
      dockerfile: Services/AccountService/AccountService.Api/Dockerfile
    ports:
      - "2100:2100"
      - "2101:2101"
    volumes:
      - ./https:/https:ro
    depends_on:
      database.server:
        condition: service_healthy
    networks:
      - smart-business-network
  
  # SALES SERVICES
  sales.smart-business:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=2200
      - ASPNETCORE_HTTPS_PORTS=2201
      - ASPNETCORE_Kestrel__Certificates__Default__Password=SuperPassword123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/cert.pfx
    container_name: sales.smart-business
    image: sales.smart-business
    build:
      context: .
      dockerfile: Services/SalesService/SalesService.Api/Dockerfile
    ports:
      - "2200:2200"
      - "2201:2201"
    volumes:
      - ./https:/https:ro
    depends_on:
      database.server:
        condition: service_healthy
    networks:
      - smart-business-network

  # WRITE SERVICE
  write.smart-business:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=2300
      - ASPNETCORE_HTTPS_PORTS=2301
      - ASPNETCORE_Kestrel__Certificates__Default__Password=SuperPassword123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/cert.pfx
    container_name: write.smart-business
    image: write.smart-business
    build:
      context: .
      dockerfile: Services/WriteService/WriteService.Api/Dockerfile
    ports:
      - "2300:2300"
      - "2301:2301"
    volumes:
      - ./https:/https:ro
    depends_on:
      database.server:
        condition: service_healthy
      read.mongodb.server:
        condition: service_healthy
      write.mongodb.server:
        condition: service_healthy
    networks:
      - smart-business-network

  # READ SERVICE 
  read.smart-business:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=2400
      - ASPNETCORE_HTTPS_PORTS=2401
      - ASPNETCORE_Kestrel__Certificates__Default__Password=SuperPassword123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/cert.pfx
    container_name: read.smart-business
    image: read.smart-business
    build:
      context: .
      dockerfile: Services/WriteService/WriteService.Api/Dockerfile
    ports:
      - "2400:2400"
      - "2401:2401"
    volumes:
      - ./https:/https:ro
    depends_on:
      database.server:
        condition: service_healthy
      read.mongodb.server:
        condition: service_healthy
      write.mongodb.server:
        condition: service_healthy
    networks:
      - smart-business-network 

  # FRONTEND APP
  frontend.smart-business:
    container_name: frontend.smart-business
    image: frontend.smart-business
    build:
      context: WebApp/smartbusiness.web
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./WebApp/smartbusiness.web:/app
      - /app/node_modules
    depends_on:
      - gateway.smart-business
      - account.smart-business
    networks:
      - smart-business-network
  
  # SQL SERVER (FOR ACCOUNT SERVICE)
  database.server:
    image: "mcr.microsoft.com/mssql/server"
    platform: linux/amd64
    container_name: database.server
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=y
      - SA_PASSWORD=SuperPassword123
    volumes:
      - ./sqlserver/data:/var/opt/mssql/data
      - ./sqlserver/log:/var/opt/mssql/log
    healthcheck:
      test: /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "SuperPassword123" -Q "SELECT 1" || exit 1
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 30s
    networks:
      - smart-business-network

  # MONGODB SERVER (FOR WRITE SERVICES)
  write.mongodb.server:
    image: mongo:latest
    container_name: write.mongodb.server
    ports:
      - "27017:27017"
    volumes:
      - ./writemongodb/data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=SA
      - MONGO_INITDB_ROOT_PASSWORD=SuperPassword123
      - MONGO_INITDB_DATABASE=SmartBusinessWriteDb
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 3s
      retries: 10
    networks:
      - smart-business-network

  # MONGODB SERVER (FOR READ SERVICES)
  read.mongodb.server:
    image: mongo:latest
    container_name: read.mongodb.server
    ports:
      - "27018:27018"
    volumes:
      - ./readmongodb/data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=SA
      - MONGO_INITDB_ROOT_PASSWORD=SuperPassword123
      - MONGO_INITDB_DATABASE=SmartBusinessReadDb
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 3s
      retries: 10
    networks:
      - smart-business-network


  # MONITORING SERVICES 

  # otel-collector:
  #   image: otel/opentelemetry-collector:0.95.0
  #   container_name: otel-collector
  #   command: ["--config=/etc/otel-collector-config.yml"]
  #   volumes:
  #     - ./ApiGateway/SmartBusiness.ApiGateway/config/otel-collector-config.yml:/etc/otel-collector-config.yml
  #   ports:
  #     - "8888:8888" 
  #     - "8889:8889" 
  #     - "13133:13133"
  #     - "4317:4317"
  #   networks:
  #     - smart-business-network

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   volumes:
  #     - ./ApiGateway/SmartBusiness.ApiGateway/config/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus-data:/prometheus
  #   restart: unless-stopped
  #   networks:
  #     - smart-business-network

  # grafana:
  #   image: grafana/grafana-oss:latest
  #   container_name: grafana
  #   ports:
  #     - '3000:3000'
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=SuperPassword123
  #   restart: unless-stopped
  #   networks:
  #     - smart-business-network

  # node_exporter:
  #   image: quay.io/prometheus/node-exporter:v1.5.0
  #   container_name: node_exporter
  #   command: '--path.rootfs=/host'
  #   pid: host
  #   restart: unless-stopped
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   networks:
  #     - smart-business-network